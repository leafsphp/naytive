export class math {
  static E: number;
  static INFINITY: number;
  static LN2: number;
  static LN10: number;
  static LOG2E: number;
  static LOG10E: number;
  static NAN: number;
  static PI: number;
  static SQRT1_2: number;
  static SQRT2: number;

  static abs: (number: number) => number;
  static acos: (number: number) => number;
  static acosf: (number: number) => number;
  static acosl: (number: number) => number;
  static asin: (number: number) => number;
  static asinf: (number: number) => number;
  static asinl: (number: number) => number;
  static atan: (number: number) => number;
  static atanf: (number: number) => number;
  static atanl: (number: number) => number;
  static atan2: (y: number, x: number) => number;
  static atan2f: (y: number, x: number) => number;
  static atan2l: (y: number, x: number) => number;
  static cbrt: (number: number) => number;
  static cbrtf: (number: number) => number;
  static cbrtl: (number: number) => number;
  static ceil: (number: number) => number;
  static clz32: (number: number) => number;
  static cos: (number: number) => number;
  static cosf: (number: number) => number;
  static cosl: (number: number) => number;
  static erf: (number: number) => number;
  static erfc: (number: number) => number;
  static exp: (number: number) => number;
  static expm1: (number: number) => number;
  static floor: (number: number) => number;
  static fround: (number: number) => number;
  static hypot: (...numbers: number[]) => number;
  static hypotf: (...numbers: number[]) => number;
  static hypotl: (...numbers: number[]) => number;
  static imul: (a: number, b: number) => number;
  static lgamma: (number: number) => number;
  static log: (number: number) => number;
  static log1p: (number: number) => number;
  static log10: (number: number) => number;
  static log2: (number: number) => number;
  static max: (...numbers: number[]) => number;
  static min: (...numbers: number[]) => number;
  static modf: (number: number) => number;
  static modff: (number: number) => number;
  static modfl: (number: number) => number;
  static pow: (base: number, exponent: number) => number;
  static random: () => number;
  static round: (number: number) => number;
  static sign: (number: number) => number;
  static sin: (number: number) => number;
  static sinf: (number: number) => number;
  static sinl: (number: number) => number;
  static sinh: (number: number) => number;
  static sinhf: (number: number) => number;
  static sinhl: (number: number) => number;
  static sqrt: (number: number) => number;
  static sqrtf: (number: number) => number;
  static sqrtl: (number: number) => number;
  static tan: (number: number) => number;
  static tanf: (number: number) => number;
  static tanl: (number: number) => number;
  static tgamma: (number: number) => number;
  static tgammaf: (number: number) => number;
  static tgammal: (number: number) => number;
  static trunc: (number: number) => number;
}
